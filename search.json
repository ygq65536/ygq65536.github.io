[{"title":"简单易用的深度学习算法网络部署方案","url":"/2023/01/29/algorithm-server/","content":"# 1.整体架构  \n整体思路较为简单，主要包括http服务模块和任务管理模块。http服务模块监听指定端口，等待后端的POST请求，收到POST请求后，返回OK给后端并添加计算任务到阻塞队列。任务管理模块并发处理任务队列中的任务，处理完成后回调后端，返回结果。  \n\n本项目基于python3的hhtp.server库实现。  \n\n# 2.代码示例  \n```python  \n\"\"\"\n@author: ygq65536\n简单易用的深度学习算法HTTP服务器程序\n\"\"\"\nimport http.server\nimport json\nimport algorithm_process # 深度学习算法接口\nimport numpy as np\nfrom urllib.request import urlopen\nimport cv2\nimport requests\nfrom multiprocessing import Process\nfrom queue import Queue\nimport logging\n\n\ndef task_process(img_url, task_id, callback_url):\n    \"\"\"下载图片，执行算法，整理结果，回调后端\n    \"\"\"\n    try:\n        resp = urlopen(img_url)\n        image = np.asarray(bytearray(resp.read()), dtype=\"uint8\")\n        image = cv2.imdecode(image, cv2.IMREAD_COLOR)\n        result = algorithm_process(image)\n        result[\"task_id\"] = task_id\n        data_json = json.dumps(result)   #dumps：将python对象解码为json数据\n        headers = {\"Content-Type\":\"application/json\",\n           \"appKey\":\"XXX\",\n           \"appSecret\":\"XXXXXXXXXX\"}\n        callback_resp = requests.post(callback_url, data_json, headers=headers)\n\n    except Exception as ex:\n        return\n\ndef task_manage(q):\n    \"\"\"队列有任务则调用算法模块处理，否则阻塞\n    \"\"\"\n    while True:\n        try:\n            datas = q.get(block=True)\n            task_id = datas[\"task_id\"]\n            img_url = datas[\"img_url\"]\n            callback_url = datas[\"callback_url\"]\n            task_process(img_url, task_id, callback_url)\n        except Exception as ex:\n            continue\n\nclass algorithm_server(http.server.BaseHTTPRequestHandler):\n    \"\"\"http服务类 监听并异步响应post调用\n    \"\"\"\n    def setup(self):\n        self.request.settimeout(10)\n        http.server.BaseHTTPRequestHandler.setup(self)\n\n    def _set_response(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def do_GET(self):\n        buf = 'XXXX'\n        self.protocal_version = 'HTTP/1.1'\n        self._set_response()\n        buf = bytes(buf, encoding=\"utf-8\")\n        self.wfile.write(buf)\n\n    def do_POST(self):\n        '''\n        处理通过POST方式传递过来的数据（放入全局任务队列）\n        异步调用模型得到结果并返回\n        '''\n        path = self.path\n        #获取post提交的数据\n        datas = self.rfile.read(int(self.headers['content-length']))\n        datas = datas.decode('utf-8')\n        datas = json.loads(datas)\n        if \"task_id\" in datas:\n            task_id = datas[\"task_id\"]\n        else:\n            buf = '403'\n            buf = bytes(buf, encoding=\"utf-8\")\n            self.wfile.write(buf)\n            return\n        if \"img_url\" in datas:\n            img_url = datas[\"img_url\"]\n        else:\n            buf = '403'\n            buf = bytes(buf, encoding=\"utf-8\")\n            self.wfile.write(buf)\n            return\n        if \"callback_url\" in datas:\n            callback_url = datas[\"callback_url\"]\n        else:\n            buf = '403'\n            buf = bytes(buf, encoding=\"utf-8\")\n            self.wfile.write(buf)\n            return\n        buf = '200'\n        self._set_response()\n        buf = bytes(buf, encoding=\"utf-8\")\n        self.wfile.write(buf)\n        task_queue.put(datas)\n        return\n\ndef start_server(ip, port):\n    http_server = http.server.HTTPServer((ip, int(port)), algorithm_server)\n    try:\n        http_server.serve_forever()  #设置一直监听并接收请求\n    except KeyboardInterrupt:\n        pass\n    http_server.server_close()\n\nif __name__ == '__main__':\n    # 全局任务队列\n    process_num = 8\n    task_queue = Queue(maxsize=0)\n    for _ in range(process_num):\n        Process(target=task_manage, args=(task_queue,)).start()\n    start_server('0.0.0.0', 9753)  # For IPv4 Network Only  \n\n```","tags":["网络后端 python"]},{"title":"C++学习指北（更新中）","url":"/2022/03/11/C++/","content":"\n## 掌握语法特性\n第一次接触C++是在南开的大一的课堂上。那时候我对编程非常抵触，充满厌恶（当然，那时候我对生活中几乎所有的东西都感到厌倦）。我的这种态度和学校的教学方法不无关系。毕竟国内高校的教学方法总是高高在上，呆板老旧。很少有老师或教材会尝试站在学生的视角去设计教学的方法，尝试站在当下的视角去选择教学的内容，从而导致很多简单、自然的概念和原则变得晦涩、生硬，导致很多实用的课程变得空洞、抽象。  \n  \n入门C++的阶段主要是在熟悉C++的语法特性，掌握常见的使用方法。入门C++最好的选择或许是选择一个时下受欢迎的视频教程。其中，世界cs名校的公开课程录像是最优选择，培训机构的公开视频教程次之。这类教程往往由真正的大佬教学，教学内容对新手友好并且跟得上时代，而且有着设计精妙、发人深思的课后练习。但因为最佳选择往往隔几年就会更替，简单搜索就能找到，所以此处并无推荐。此外，选择一个热门的教学视频还意味着课后作业可以轻易找到大量讨论作为参考。   \n      \n在了解了基本语法特性后，应该根据学习目标进行大量实践。实践的过程中再去学习和掌握新的语法特性和设计思想，再去学习数据结构、算法设计、操作系统、编译原理、计算机系统等领域的重要方法和原则。推荐在[cppreference](https://en.cppreference.com/w/)查找和确认C++内置语法特性及STL的细节，也可以通过搜索引擎搜索相关的讨论和分析，不过要注意鉴别讨论者的可靠性。也推荐在[LeetCode](https://leetcode.cn/problemset/)选择一些题目进行编程练习，提高算法设计和实现能力。\n\n**一条个人经验**：C++更接近一种软件，而不是一种思想，它的的发展动力来源于归纳（induction），而不是演绎（deduction）。学习语法特性最重要的是搞清楚这个特性是为了什么而被提出，应该用在什么场景。例如看到一条C++新标准增加的新特性不是自己琢磨为什么增加这样的特性，体现了什么思想；而是查查大佬们是怎么用这个特性的，它到底能解决什么问题，是更安全更清晰了，还是更高效更方便了？所以在看大佬写的代码的时候，不要畏惧没见过的用法，而是主动学习积累新特性的正确用法。学习其他语言也是一样的。\n\n\n## 学习最佳实践\nC++语法特性众多，可以称得上是一个语言的联邦（语出《effective C++》）。那么实现相同的功能，可能有很多的思路和工具可用。这时候就要考虑实现的可读性、安全性、易维护性，否则会导致软件维护困难（例如我见过不会用多态、通篇dynamic_cast还大谈设计模式的程序员），或者更实际的角度来说，到时你的代码无法通过pr或者cr。实际上，无论是大到整个软件架构的设计，还是小到[具体的子问题的解决](https://github.com/fffaraz/awesome-cpp)，往往都有其他大佬探索后总结的最佳实践经验。学习、审视和应用这些最佳实践无疑是提高技术理解的捷径。阅读相关书籍、文章固然有效，但往往相对滞后；加入一个高水平的技术团队或者参与高水平的开源代码库开发才是真正提高技术的不二之选。","tags":["C++","设计模式","最佳实践"]}]